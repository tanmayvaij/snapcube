import { mkdirSync, readFileSync, writeFileSync } from "fs";
import { join } from "path";
import { isSnapcubeJsonValid } from "../core";

/**
 * Recreate a project from a SnapCube JSON snapshot file.
 *
 * @param filePath - Path to the `.snapcube.json` file generated by SnapCube
 */
export const createProject = (filePath: string) => {
  console.log("Validating snapcube file");

  // Step 1: Validate file format
  if (!isSnapcubeJsonValid(filePath)) throw new Error("Invalid snapcube file");

  console.log(`Restoring project from: ${filePath}`);

  // Step 2: Parse the JSON snapshot into a list of files
  const data = JSON.parse(readFileSync(filePath, "utf-8")) as SnapCubeFile[];

  // Step 3: Iterate over each file and restore it
  for (const file of data) {
    // Ensure the directory exists (create recursively if needed)
    mkdirSync(file.filePath, { recursive: true });

    // If content was skipped (ignored during snapshot), donâ€™t write it
    const fullPath = join(file.filePath, file.fileName);

    if (file.content === null) {
      console.log(`Skipping content for ignored file: ${fullPath}`);
      continue;
    }

    // Restore binary files (images, PDFs, etc.) from base64
    if (file.isBinary) {
      console.log(`ðŸ–¼ Restoring binary file: ${fullPath}`);
      writeFileSync(fullPath, Buffer.from(file.content, "base64"));
    }

    // Restore text files in UTF-8 encoding
    else {
      console.log(`Restoring text file: ${fullPath}`);
      writeFileSync(fullPath, file.content, "utf-8");
    }
  }

  // Step 4: Confirm completion
  console.log(`Project restored successfully.`);
};
